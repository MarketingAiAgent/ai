DBMS: POSTGRESQL
SCHEMA: public   -- search_path = public

TABLE channels (
  channel_id   INTEGER PK,                               -- IDENTITY
  channel_name TEXT NOT NULL,                            -- 채널명
  channel_type TEXT NOT NULL CHECK (IN 'Paid','Owned'),  -- 채널 유형
  medium       TEXT NOT NULL                              -- 매체 코드('cpc','email','push' 등)
)

TABLE products (
  product_id    INTEGER PK,                               -- IDENTITY
  brand         TEXT NULL,
  product_name  TEXT NOT NULL,                            -- 제품명(중복 가능)
  category_l1   TEXT NULL,
  category_l2   TEXT NULL,
  list_price    NUMERIC(12,2) NULL CHECK (list_price >= 0) -- 기본 정가(없을 수 있음)
)

TABLE campaigns (
  campaign_id   INTEGER PK,                               -- IDENTITY
  channel_id    INTEGER NOT NULL FK -> channels.channel_id ON UPDATE CASCADE,
  campaign_name TEXT NOT NULL,
  utm_source    TEXT NULL,
  utm_medium    TEXT NULL,
  utm_campaign  TEXT NULL,
  start_date    DATE NOT NULL,                            -- 캠페인 시작일(캘린더 DATE)
  end_date      DATE NOT NULL,                            -- 캠페인 종료일(캘린더 DATE)
  budget        NUMERIC(14,2) NULL CHECK (budget >= 0),
  objective     TEXT NULL
)

TABLE ad_daily (
  date         DATE    NOT NULL,                          -- 집계 기준일
  campaign_id  INTEGER NOT NULL FK -> campaigns.campaign_id ON UPDATE CASCADE,
  channel_id   INTEGER NOT NULL FK -> channels.channel_id  ON UPDATE CASCADE,
  product_id   INTEGER NULL  FK -> products.product_id     ON UPDATE CASCADE,
  impressions  BIGINT  NOT NULL CHECK (impressions >= 0),
  clicks       BIGINT  NOT NULL CHECK (clicks >= 0 AND clicks <= impressions),
  spend        NUMERIC(14,2) NOT NULL CHECK (spend >= 0),
  PRIMARY KEY (date, campaign_id)                         -- (campaign_id, date) 유니크
)

TABLE price_daily (
  date        DATE    NOT NULL,                           -- 스냅샷 기준일
  product_id  INTEGER NOT NULL FK -> products.product_id ON UPDATE CASCADE,
  list_price  NUMERIC(12,2) NOT NULL CHECK (list_price >= 0),
  sale_price  NUMERIC(12,2) NULL  CHECK (sale_price IS NULL OR sale_price >= 0),
  promo_flag  BOOLEAN NOT NULL DEFAULT FALSE,
  PRIMARY KEY (date, product_id),
  CHECK (promo_flag IS FALSE OR (sale_price IS NOT NULL AND sale_price <= list_price))
)

TABLE users (
  user_id          TEXT PK,
  gender           TEXT NULL CHECK (gender IN ('M','F') OR gender IS NULL),
  age_group        TEXT NULL,                              -- 예: '10s','20s','30s','40s','50s+'
  signup_date      DATE NOT NULL,
  churn_date       DATE NULL CHECK (churn_date >= signup_date),
  first_channel_id INTEGER NULL FK -> channels.channel_id ON UPDATE CASCADE,
  device_pref      TEXT NULL CHECK (device_pref IN ('mobile','desktop','tablet') OR device_pref IS NULL)
)

TABLE web_sessions (
  session_id      BIGINT PK,                               -- IDENTITY, 세션 단위 이벤트
  session_date    DATE   NOT NULL,                         -- 세션 발생 '일자' (DATE)
  user_id         TEXT   NOT NULL FK -> users.user_id      ON UPDATE CASCADE,
  campaign_id     INTEGER NOT NULL FK -> campaigns.campaign_id ON UPDATE CASCADE,
  channel_id      INTEGER NOT NULL FK -> channels.channel_id  ON UPDATE CASCADE,
  device          TEXT   NOT NULL CHECK (device IN ('mobile','desktop','tablet')),
  landing_page    TEXT NULL,
  utm_source      TEXT NULL,
  utm_medium      TEXT NULL,
  utm_campaign    TEXT NULL,
  session_revenue NUMERIC(14,2) NOT NULL DEFAULT 0 CHECK (session_revenue >= 0)
)

TABLE orders (
  order_id        BIGINT PK,                               -- IDENTITY
  order_datetime  TIMESTAMP NOT NULL,                      -- 타임스탬프(타임존 없음: timestamp without time zone)
  user_id         TEXT    NOT NULL FK -> users.user_id     ON UPDATE CASCADE,
  campaign_id     INTEGER NOT NULL FK -> campaigns.campaign_id ON UPDATE CASCADE,
  channel_id      INTEGER NOT NULL FK -> channels.channel_id  ON UPDATE CASCADE,
  total_amount    NUMERIC(14,2) NOT NULL CHECK (total_amount > 0),
  discount_amount NUMERIC(12,2) NOT NULL DEFAULT 0 CHECK (discount_amount >= 0),
  is_first_purchase BOOLEAN NOT NULL DEFAULT FALSE
)

TABLE order_items (
  order_item_id BIGINT PK,                                 -- IDENTITY
  order_id      BIGINT  NOT NULL FK -> orders.order_id     ON UPDATE CASCADE ON DELETE CASCADE,
  product_id    INTEGER NOT NULL FK -> products.product_id ON UPDATE CASCADE,
  quantity      INTEGER NOT NULL CHECK (quantity > 0),
  unit_price    NUMERIC(12,2) NOT NULL CHECK (unit_price >= 0)
)

VIEW v_channel_daily_kpi AS
-- 열: date, channel_id, channel_name, sessions, orders, revenue, spend, roas
-- 정의 개요:
--   web_sessions를 기준(LEFT JOIN)으로 같은 '일자(DATE)'와 'channel_id'에 대해
--   orders(ORDER BY DATE(order_datetime)) 및 ad_daily(date) 를 매칭.
--   sessions = DISTINCT session_id
--   orders   = DISTINCT order_id
--   revenue  = SUM(o.total_amount)
--   spend    = SUM(ad.spend)
--   roas     = revenue / spend (spend>0일 때)

RELATIONSHIPS:
- channels 1:N campaigns, web_sessions, orders, ad_daily
- campaigns 1:N ad_daily, web_sessions, orders
- products  1:N price_daily, order_items
- users     1:N web_sessions, orders
- orders    1:N order_items

CONVENTIONS / NOTES:
- 날짜 컬럼(date, *_date)은 모두 DATE, 주문 일시는 TIMESTAMP(naive). '최근 N일' 같은 질의에서
  일 단위 비교가 필요하면 반열린 구간 [start, end) 규칙을 권장.
- 제품명은 중복 가능하므로 집계는 product_id 기준으로 GROUP BY 하고 product_name은 표시용으로 함께 SELECT.
- ad_daily.channel_id는 캠페인에 귀속된 채널을 중복 보관하는 형태(denormalized)이며 일반적으로 campaigns.channel_id와 동일.
- order_items 금액 계산은 quantity × unit_price, 주문 금액은 orders.total_amount 사용.